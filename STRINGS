Super Reduced String:

import math
import os
import random
import re
import sys

def superReducedString(s):
    while 1:
        flag = False
        
        for i in range(len(s)-1):
            if s[i]==s[i+1]:
                s = s[:i]+s[i+2:]
                flag = True
                break
                
        if flag == False:
            break
    if len(s) == 0:
        return 'Empty String'
    return s

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = superReducedString(s)

    fptr.write(result + '\n')

    fptr.close()





CamelCase:

import math
import os
import random
import re
import sys


def camelcase(s):
    return len(re.findall(r"[A-Z]{0,1}[a-z]+", s))
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    s = input()

    result = camelcase(s)

    fptr.write(str(result) + '\n')

    fptr.close()





Strong Password:

import math
import os
import random
import re
import sys

def minimumNumber(n, password):
    uc  = 0 if re.search(r'[A-Z]', password) else 1
    lc  = 0 if re.search(r'[a-z]', password) else 1
    num = 0 if re.search(r'[0-9]', password) else 1
    spc = 0 if re.search(r'[!@#$%^&*()\-+]', password) else 1

    count = uc + lc + num + spc
    return max(6 - n, count)
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    password = input()

    answer = minimumNumber(n, password)

    fptr.write(str(answer) + '\n')

    fptr.close()





Two Characters:

import math
import os
import random
import re
import sys

def alternate(s):
    a=list(set(s))
    ans=0
    for x in range(len(a)-1):
        for y in range(1,len(a)-x):
            me=[a[x],a[x+y]]
            nit=""
            for t in s:
                if (t in me):
                    if (nit=="" or t!=nit[-1]):
                        nit+=t
                    else:
                        nit=""
                        break
            if len(nit)>ans:
                ans=len(nit)
    return ans

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    l = int(input().strip())

    s = input()

    result = alternate(s)

    fptr.write(str(result) + '\n')

    fptr.close()





Caesar Cipher:

import math
import os
import random
import re
import sys

def caesarCipher(s, k):
    newText=""
    for letter in s:
        if letter in "abcdefghijklmnopqrstuvwxyz":
            newText +=chr(97+(ord(letter)-97+k)%26)
        elif letter in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            newText +=chr(65+(ord(letter)-65+k)%26)
        else: newText += letter
    return newText

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    s = input()

    k = int(input().strip())

    result = caesarCipher(s, k)

    fptr.write(result + '\n')

    fptr.close()
