Big Sorting:

import math
import os
import random
import re
import sys

def bigSorting(unsorted):
     unsorted.sort(key = lambda x: int(x))
     return unsorted
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    unsorted = []

    for _ in range(n):
        unsorted_item = input()
        unsorted.append(unsorted_item)

    result = bigSorting(unsorted)

    fptr.write('\n'.join(result))
    fptr.write('\n')

    fptr.close()





Intro to Tutorial Challenges:

import math
import os
import random
import re
import sys

def bs(arr,x):
    l = 0 
    r = len(arr)-1
    while l<=r:
        m= (l+r)//2
        if arr[m]==x:
            return m
        elif x>arr[m]:
            l= m+1
        else:
            r=m-1
    return -1
def introTutorial(V, arr):
    return bs(arr,V)
   
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    V = int(input().strip())

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = introTutorial(V, arr)

    fptr.write(str(result) + '\n')

    fptr.close()





Insertion Sort - Part 1:

import math
import os
import random
import re
import sys

def insertionSort1(n, arr):
    j = n-1
    store = arr[j]
    
    for i in range(j, -1, -1):
        if store < arr[i-1] and i >= 1:
            arr[i] = arr[i-1]
            print(' '.join(str(x) for x in arr))
        else: 
            arr[i] = store
            print(' '.join(str(x) for x in arr))
            break 
if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort1(n, arr)





Insertion Sort - Part 2:

import math
import os
import random
import re
import sys


def insertionSort2(n, arr):
    for start in range(1,n):
        j=start
        while arr[j-1]>arr[j] and j>0:
            arr[j],arr[j-1]=arr[j-1],arr[j]
            j-=1
        print(*arr)

if __name__ == '__main__':
    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    insertionSort2(n, arr)





Running Time of Algorithms:

import math
import os
import random
import re
import sys

def runningTime(arr):
    a = 0
    for i in range(1, len(arr)):
        j = i-1
        key = arr[i]
        while (j >= 0) and (arr[j] > key):
           arr[j+1] = arr[j]
           j -= 1
           a += 1
        arr[j+1] = key
    return a

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = runningTime(arr)

    fptr.write(str(result) + '\n')

    fptr.close()





Quicksort 1 - Partition:

import math
import os
import random
import re
import sys

def quickSort(arr):
    p=arr[0]
    i=0
    # loop invariant : 
    # arr[1],arr[2],...,arr[i] <= p < arr[i+1],arr[i+2],..,arr[j]
    for j in range(1,len(arr)):
        if arr[j] <= p:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[0],arr[i]=arr[i], arr[0]
    return arr
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = quickSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()





Counting Sort 1:

import math
import os
import random
import re
import sys

def countingSort(arr):
    ind_arr=[0]*100
    for i in arr:
        ind_arr[i]+=1
    return ind_arr

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()





Counting Sort 2:

import math
import os
import random
import re
import sys

def countingSort(arr):
    arrCount = [0]*100
    for x in arr:
        arrCount[x] += 1
    returnArr = []
    for x in range(100):
        for y in range(arrCount[x]):
            returnArr.append(x)
    return returnArr

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = countingSort(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()





Closest Numbers:

import math
import os
import random
import re
import sys


def closestNumbers(arr):
    ls = sorted(arr)    
    min = ls[1] - ls[0]

    for i in range(len(ls) - 1):
        if ls[i + 1] - ls[i] < min:
            min = ls[i + 1] - ls[i]
    
    result = [(ls[i], ls[i + 1]) for i in range(len(ls) - 1) 
              if ls[i + 1] - ls[i] == min]

    return [item for t in result for item in t]
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    arr = list(map(int, input().rstrip().split()))

    result = closestNumbers(arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

    fptr.close()





The Full Counting Sort:

import math
import os
import random
import re
import sys

def countSort(arr):
    length=len(arr)
    x=[]
    m=-1
    for i in arr:
        if int(i[0])>m:
            m=int(i[0])
    
    for i in range(m+1):
        x.append([])
    for i in range(length):
        if i<length//2:
            p="-"
        else:
            p=arr[i][1]
        x[int(arr[i][0])].append(p)
    #print(x)
    for i in x:
        for j in i:
            print(j,end=" ")


if __name__ == '__main__':
    n = int(input().strip())

    arr = []

    for _ in range(n):
        arr.append(input().rstrip().split())

    countSort(arr)
